<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mokoko.contacts.ContactMapper">

    <sql id="ContactColumns">
        id
        , group_id, user_id, fullname, firstname, lastname, nickname, birth, organization, position, sort_no, notes
    </sql>
    <sql id="ContactExpansionColumns">
        id
        , contact_id, phone, phone_type, messenger, address, address_type, special_day, special_day_type, email,
        sort_no, created
    </sql>

    <resultMap type="Contact" id="ContactResultMap">
        <result property="id" column="id"/>
        <result property="userID" column="user_id"/>
        <result property="fullName" column="fullname"/>
        <result property="firstname" column="firstname"/>
        <result property="lastname" column="lastname"/>
        <result property="nickname" column="nickname"/>
        <result property="birth" column="birth"/>
        <result property="organization" column="organization"/>
        <result property="position" column="position"/>
        <result property="sortNumber" column="sort_no"/>
        <result property="notes" column="notes"/>
        <result property="important" column="important"/>
        <result property="recentDate" column="recent_date"/>
        <collection property="contactExpansions" ofType="ContactExpansion">
            <result property="id" column="contact_expansion_id"/>
            <result property="contactID" column="contact_id"/>
            <result property="phone" column="phone"/>
            <result property="phoneType" column="phone_type"/>
            <result property="messenger" column="messenger"/>
            <result property="address" column="address"/>
            <result property="addressType" column="address_type"/>
            <result property="specialDay" column="special_day"/>
            <result property="specialDayType" column="special_day_type"/>
            <result property="sns" column="sns"/>
            <result property="snsType" column="sns_type"/>
            <result property="email" column="email"/>
            <result property="sortNumber" column="contact_expansion_sort_no"/>
            <result property="created" column="created"/>
        </collection>
        <collection property="groups" ofType="Group">
            <result property="id" column="group_id"/>
            <result property="name" column="name"/>
        </collection>
    </resultMap>

    <sql id="ContactsColumns">
        c.id,
        c.user_id,
        fullname,
        firstname,
        lastname,
        nickname,
        birth,
        organization,
        position,
        c.sort_no,
        notes,
        ce.id contact_expansion_id,
        ce.contact_id,
        phone,
        phone_type,
        messenger,
        address,
        address_type,
        special_day,
        special_day_type,
        sns,
        sns_type,
        email,
        ce.sort_no contact_expansion_sort_no,
        ce.created,
        important
    </sql>

    <select id="selectAllContacts" resultMap="ContactResultMap">
        SELECT group_id, name, t.*
        FROM (
            SELECT <include refid="ContactsColumns" />, cr.created recent_date
            FROM contact c
                LEFT JOIN contact_expansion ce
                    ON c.id = ce.contact_id
                LEFT JOIN contact_recent cr
                    ON c.id = cr.contact_id
            where c.user_id = #{userID}
            <!-- ORDER BY c.sort_no -->
        ) t
        LEFT JOIN (
            SELECT group_id, ccg.contact_id, name, group_type
            FROM contact_group cg
                INNER JOIN contact_contact_group ccg
                    ON cg.id = ccg.group_id
            WHERE user_id = #{userID}
        ) cg
            ON id = cg.contact_id
        WHERE group_type <![CDATA[ < ]]> 2
           OR group_type IS NULL
    </select>

    <select id="selectContact" resultMap="ContactResultMap">
        SELECT <include refid="ContactsColumns" />, cr.created recent_date
        FROM contact c
            LEFT JOIN contact_expansion ce
                ON c.id = ce.contact_id
            LEFT JOIN contact_recent cr
                ON c.id = cr.contact_id
            LEFT JOIN contact_contact_group ccg
                ON c.id = ccg.contact_id
            LEFT JOIN contact_group cg
                ON ccg.group_id = cg.id
        WHERE c.id = #{id}
    </select>

    <select id="selectGroupContacts" resultMap="ContactResultMap">
        SELECT group_id, name, contacts.*
        FROM (
            SELECT <include refid="ContactsColumns" />
            FROM (
                SELECT contact_id
                FROM contact_contact_group
                WHERE group_id = #{groupID}
            ) ccg
                INNER JOIN contact c
                    ON c.id = ccg.contact_id
                LEFT JOIN contact_expansion ce
                     ON c.id = ce.contact_id
           <!-- ORDER  BY c.sort_no -->
        ) contacts
            LEFT JOIN (
                SELECT group_id, contact_id, name
                FROM contact_group cg
                    INNER JOIN contact_contact_group ccg
                        ON cg.id = ccg.group_id
                WHERE  user_id = #{userID}
            ) cg
                ON contacts.id = cg.contact_id
    </select>

    <select id="selectIDListAtGroup" resultType="int">
        SELECT ccg.contact_id
        FROM contact_contact_group ccg
            INNER JOIN contact c
                ON ccg.contact_id = c.id
        WHERE group_id = #{groupID}
    </select>

    <select id="selectIDList" resultType="int">
        SELECT id
        FROM contact
        WHERE user_id = #{userID}
        AND id in
        <foreach collection="idList" item="id" index="index" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>

    <select id="selectAllCount" resultType="int">
        SELECT (
           SELECT count(*)
           FROM contact
           WHERE user_id = 'mailmaster@mokoko.shop'
        ) - (
           SELECT count(*)
           FROM contact_group cg
                    INNER JOIN contact_contact_group ccg
                               ON cg.id = ccg.group_id
           WHERE user_id  = 'mailmaster@mokoko.shop'
             AND group_type = 2
        ) all_count
    </select>

    <select id="selectImportantCount" resultType="int">
        SELECT COUNT(*)
        FROM contact
        WHERE user_id = #{userID}
          AND important = 1
    </select>

    <select id="selectRecentCount" resultType="int">
        SELECT COUNT(*)
        FROM contact_recent cr
            INNER JOIN contact c
                ON cr.contact_id = c.id
        WHERE cr.user_id = #{userID}
    </select>

    <delete id="deleteContact">
        DELETE
        FROM contact
        WHERE id = #{id}
    </delete>

    <delete id="deleteContactExpansion">
        DELETE
        FROM contact_expansion
        WHERE contact_id = #{contactID}
    </delete>

    <delete id="deleteContactRecent">
        DELETE
        FROM contact_recent
        WHERE contact_id = #{contactID}
    </delete>

    <delete id="unlinkGroup">
        DELETE
        FROM contact_contact_group
        WHERE contact_id = #{contactID}
    </delete>

    <delete id="unlinkAllGroup">
        DELETE
        FROM contact_contact_group
        WHERE contact_id in
        <foreach collection="idList" item="id" index="index" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

    <insert id="moveToGroup">
        INSERT INTO contact_contact_group(contact_id, group_id)
        VALUES
        <foreach collection="idList" item="id" index="index" separator="," >
            (#{id}, #{groupID})
        </foreach>
    </insert>

    <insert id="insertContact">
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO contact (
            user_id, fullname, firstname, lastname, nickname,
            birth, organization, position, sort_no, notes,
            important
        ) VALUES (
            #{userID}, #{fullName}, #{firstname}, #{lastname}, #{nickname},
            #{birth}, #{organization}, #{position}, #{sortNumber}, #{notes},
            #{important}
        )
    </insert>

    <insert id="insertContactExpansion">
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO contact_expansion (
            contact_id, phone, phone_type, messenger,
            address, address_type, special_day, special_day_type,
            sns, sns_type, email, sort_no
        ) VALUES (
            #{contactID}, #{phone}, #{phoneType}, #{messenger},
            #{address}, #{addressType}, #{specialDay}, #{specialDayType},
            #{sns}, #{snsType}, #{email}, #{sortNumber}
        )
    </insert>

    <insert id="insertContactExpansions">
        INSERT INTO contact_expansion (
            contact_id, phone, phone_type, messenger,
            address, address_type, special_day, special_day_type,
            sns, sns_type, email, sort_no
        )
        VALUES
        <foreach collection="contactExpansions" item="expansion" index="index" separator="," >
            ( #{expansion.contactID}, #{expansion.phone}, #{expansion.phoneType}, #{expansion.messenger},
              #{expansion.address}, #{expansion.addressType}, #{expansion.specialDay}, #{expansion.specialDayType},
              #{expansion.sns}, #{expansion.snsType}, #{expansion.email}, #{expansion.sortNumber} )
        </foreach>
    </insert>

    <update id="updateContact">
        UPDATE contact
        <trim prefix="SET" suffixOverrides=",">
            <if test="firstname != null">
                firstname = #{firstname},
            </if>
            <if test="lastname != null">
                lastname = #{lastname},
            </if>
            <if test="fullName != null">
                fullname = #{fullName},
            </if>
            <if test="nickname != null">
                nickname = #{nickname},
            </if>
            <if test="birth != null">
                birth = #{birth},
            </if>
            <if test="organization != null">
                organization = #{organization},
            </if>
            <if test="position != null">
                position = #{position},
            </if>
            <if test="notes != null">
                notes = #{notes},
            </if>
            important = #{important},
        </trim>
        WHERE id = #{id}
    </update>

</mapper>